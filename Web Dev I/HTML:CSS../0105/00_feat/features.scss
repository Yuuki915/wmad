// This is a single line comment
/*
    This is a multi-line comment
*/

// -----------------------------
// Variables
// -----------------------------

$color-primary: #ffff00;

body {
  background-color: $color-primary;
}

// Output in CSS
body {
  background-color: #ffff00;
}

// -----------------------------
// Nesting
// -----------------------------

// regular CSS
.navbar {
  background-color: orange;
  padding: 1rem;
}
.navbar ul {
  list-style: none;
}
.navbar li {
  text-align: center;
  margin: 1rem;
}

// SASS
.navbar {
  background-color: orange;
  padding: 1rem;
  ul {
    list-style: none;
  }
  li {
    text-align: center;
    margin: 1rem;
  }
}

// -----------------------------
// Mixins
// -----------------------------

@mixin transform($property) {
  transform: $property;
  -webkit-transform: $property;
  -ms-transform: $property;
}

.navbar {
  background-color: orange;
  padding: 1rem;
  ul {
    list-style: none;
  }
  li {
    text-align: center;
    margin: 1rem;
    @include transform(rotate(180deg));
  }
}

// -----------------------------
// Functions
// -----------------------------

@function add-numbers($first-number, $second-number) {
  @return $first-number + $second-number;
}

.box-1 {
  padding: add-numbers(5px, 15px);
}

// output
.box-1 {
  padding: 20px;
}

// -----------------------------
// Inheritance
// -----------------------------

.button {
  background-color: #0000ff;
  border: none;
  color: #fff;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 1.5rem;
}

.button-secondary {
  @extend button;
  background-color: green;
}

// -----------------------------
// & operator
// -----------------------------

// <button class="btn btn--red">Click!</button>
.btn {
  display: inline-block;
  padding: 15px 32px;
}
.btn--red {
  background-color: #ff0000;
}
.btn:hover {
  background-color: #fff;
}
// using the & operator
.btn {
  display: inline-block;
  padding: 15px 32px;
  &--red {
    background-color: #ff0000;
  }
  &:hover {
    background-color: #fff;
  }
}

// -----------------------------
// & control directive
// -----------------------------

// if and else
@mixin heading($size) {
  @if $size == large {
    font-size: 4rem;
  } @else if $size == medium {
    font-size: 3rem;
  } @else if $size == small {
    font-size: 2rem;
  } @else {
    font-size: 1rem;
  }
}

h1 {
  @include heading((large));
}
h6 {
  @include heading((small));
}

// for-through
@for $i from 1 through 5 {
  .list-#{$i} {
    width: 2px * $i;
  }
}
// ↓ ↓ ↓
// output
.list-1 {
  width: 2px;
}
.list-2 {
  width: 4px;
}
.list-3 {
  width: 6px;
}
.list-4 {
  width: 8px;
}
.list-5 {
  width: 10px;
}

// for-to
@for $i from 1 to 5 {
  .list-#{$i} {
    width: 2px * $i;
  }
}
// ↓ ↓ ↓
// output
.list-1 {
  width: 2px;
}
.list-2 {
  width: 4px;
}
.list-3 {
  width: 6px;
}
.list-4 {
  width: 8px;
}

// while
$i: 1;
@while $i <= 5 {
  .list-#{$i} {
    width: 2px * $i;
  }
  $i: $i + 1;
}

// -----------------------------
// interpolation
// -----------------------------

// interpolation simble is => #{}
// #{variable_name}

@mixin interpolation($editable, $val1, $val2, $prop1, $prop2) {
  background-#{$editable}: $val1;
  position: $val2;
  #{$prop1}: 0px;
  #{$prop2}: 0px;
}
.section1 {
  @include interpolation("image", url("bg.png"), absolute, top, right);
}
.section2 {
  @include interpolation("color", gray, absolute, top, left);
}

// output
.section1 {
  background-image: url("bg.png");
  position: absolute;
  top: 0;
  right: 0;
}
.section2 {
  background-color: gray;
  position: absolute;
  top: 0;
  left: 0;
}

// -----------------------------
// Placeholder
// -----------------------------

%placeholder {
  width: 100%;
  height: 100%;
}

body {
  @extend %placeholder;
}
p {
  @extend %placeholder;
}

// output
body,
p {
  width: 100%;
  height: 100%;
}
